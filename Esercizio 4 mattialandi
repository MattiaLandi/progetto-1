#include <iostream>
using namespace std;

struct Nodo {
    int val;
    Nodo* successivo;
};

// Funzione per inserire un nodo in coda
void inserisciInCoda(Nodo*& testa, int val) {
    Nodo* nuovoNodo = new Nodo();
    nuovoNodo->val = val;
    nuovoNodo->successivo = NULL;

    if (!testa) {
        testa = nuovoNodo;
        return;
    }

    Nodo* temp = testa;
    while (temp->successivo) {
        temp = temp->successivo;
    }
    temp->successivo = nuovoNodo;
}

// Funzione per inserire un nodo in una posizione specifica
void inserisciInPosizione(Nodo*& testa, int val, int posizione) {
    Nodo* nuovoNodo = new Nodo();
    nuovoNodo->val = val;

    if (posizione == 0) {
        nuovoNodo->successivo = testa;
        testa = nuovoNodo;
        return;
    }

    Nodo* temp = testa;
    for (int i = 0; i < posizione - 1 && temp != NULL; i++) {
        temp = temp->successivo;
    }

    if (temp == NULL) {
        cerr << "Posizione fuori dai limiti" << endl;
        delete nuovoNodo;
        return;
    }

    nuovoNodo->successivo = temp->successivo;
    temp->successivo = nuovoNodo;
}

// Funzione per mostrare la lista
void mostra(Nodo* testa) {
    Nodo* temp = testa;
    while (temp) {
        cout << temp->val << " -> ";
        temp = temp->successivo;
    }
    cout << "nullptr" << endl;
}

// Funzione per liberare la memoria
void liberaLista(Nodo*& testa) {
    Nodo* temp;
    while (testa) {
        temp = testa;
        testa = testa->successivo;
        delete temp;
    }
}

int main() {
    Nodo* lista = NULL;

    // Inizializza  con i valori 1, 2, 3, 4, 5
    for (int i = 1; i <= 5; i++) {
        inserisciInCoda(lista, i);
    }

    cout << "Lista iniziale: ";
    mostra(lista);

    // Inserisci 77 a metÃ  della lista
    inserisciInPosizione(lista, 77, 2); 

    // Inserisci 8 nella lista
    inserisciInPosizione(lista, 8, 3); 

    cout << "Lista dopo le aggiunte: ";
    mostra(lista);

    // Libera la memoria
    liberaLista(lista);

    return 0;
}
